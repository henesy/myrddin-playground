// A naive tail(1)-like implementation

/*
	1. Scan forward to count all the \n runes until EOF
	2. Scan forward to n - m line where n is the number of lines in the file and m is the number of lines to print
	3. From the n - m line, print every line until EOF
*/

use std
use bio


var		follow					// Watch and print further data
var		nlines					// Number of lines to print
var		out						// Buffered output


// Emit the lines of a file from a given line
const tail = {fd : std.fd
	var file	= bio.mkfile(fd, bio.Rd)
	var nnl		= 0
	var nbytes	= 0
	const nl	= ('\n' : byte)
	var targl	// Line to start printing from

	// Get number of newlines
	while true
		match bio.getb(file)
		| `std.Ok	nl:
			nnl++
			nbytes++

		| `std.Err	`bio.Eof:
			break

		| `std.Err	err:
			std.fatal("err: could not read rune from fd {} - {}\n", fd, err)

		| _:
			nbytes++
		;;
	;;

	targl = nnl - nlines

	// Silently print everything if we get a number of lines to print > existent number of lines
	if targl < 1
		targl = 1
	;;

	bio.seek(file, 0)

	// Scan forward to position
	var l
	for l = 1; l <= targl; ;
		match bio.getc(file)
		| `std.Ok	'\n':
			l++

		| `std.Err	`bio.Eof:
			std.fatal("err: got premature EOF on line {} going to {}\n", l, targl)

		| `std.Err	err:
			std.fatal("err: could not read rune on line {} going to {} - {}\n", l, targl, err)

		| _:
			;
		;;
	;;

	// Emit lines to print
	while true
		match bio.getc(file)
		| `std.Err	`bio.Eof:
			break

		| `std.Err	err:
			std.fatal("err: could not read rune - {}\n", err)

		| `std.Ok	c:
			bio.putc(out, c)
		;;
	;;

	bio.flush(out)

	// Keep reading for bytes - does this even work?
	if follow
		while true
			match bio.getb(file)
			| `std.Ok	b:
				bio.putb(out, b)

			| `std.Err	`bio.Eof:
				// Here, we purposefully ignore EOF
				;

			| `std.Err	err:
				std.fatal("err: could not follow read rune from fd {} - {}\n", fd, err)
			;;
		;;
	;;

	// Clean up
	bio.close(file)
	std.close(fd)
	bio.flush(out)
}


// Something vaguely tail(1) in Myrddin
const main = {args : byte[:][:]
	var cmd
	nlines	= 10
	follow	= false

	// Commandline argument parsing
	cmd = std.optparse(args, &[
		.argdesc = "[file …]",
		.opts = [
			[.opt='f',						.desc = "watch and print further data"],
			[.opt='n',	.arg = "nlines",	.desc = "emit 'nlines' number of lines"],
		][:]
	])

	for opt : cmd.opts
		match opt
		| ('f', ""):
			follow = true
		| ('n', arg):
			match std.intparse(arg)
			| `std.Some v:
				if v < 1
					std.fatal("err: lines 'nlines' must be ≥ 1, was {}\n", v)
				;;

				nlines = v
			| `std.None:
				std.fatal("err: invalid argument for nlines\n")
			;;
		| _:
			std.fatal("unreachable\n")
		;;
	;;

	out = bio.mkfile((1 : std.fd), bio.Wr)

	match cmd.args.len
	| 0:
		// Read from stdin if no [file] is specified
		tail((0 : std.fd))

	| _:
		// For each [file …] argument
		for file : cmd.args
			match std.open(file, std.Oread)
			| `std.Ok	fd:
				tail(fd)

			| `std.Err	err:
				std.fatal("err: could not open {} - {}\n", file, err)
			;;
		;;
	;;

	bio.close(out)
}
